package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func clearState() {
	for i := 0; i < 10; i++ {
		knotPositions[i] = Position{0, 0}
	}
	tailVisitedPositions = []Position{}
}

func TestProcessElfFile(t *testing.T) {
	result := processElfFile()
	// 14073 too high
	// 8017 too high
	// 7540 too high
	// 6801 ?
	// 6354
	expected := 2651
	if result != expected {
		t.Errorf("expected %d, received %d", expected, result)
	}
}

func TestLeft(t *testing.T) {
	clearState()
	result := moveLeft(Position{0, 0})
	expected := Position{-1, 0}
	if result.X != expected.X || result.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, result)
	}
}

func TestRight(t *testing.T) {
	clearState()
	result := moveRight(Position{0, 0})
	expected := Position{1, 0}
	if result.X != expected.X || result.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, result)
	}
}

func TestUp(t *testing.T) {
	clearState()
	result := moveUp(Position{0, 0})
	expected := Position{0, 1}
	if result.X != expected.X || result.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, result)
	}
}

func TestDown(t *testing.T) {
	clearState()
	result := moveDown(Position{0, 0})
	expected := Position{0, -1}
	if result.X != expected.X || result.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, result)
	}
}

func TestMove(t *testing.T) {
	clearState()
	result := move(Position{0, 0}, moveDown)
	expected := Position{0, -1}
	if result.X != expected.X || result.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, result)
	}
}

func TestMoveHead(t *testing.T) {
	clearState()
	moveHead(UP, 3)
	expected := Position{0, 3}
	headPosition := knotPositions[0]
	if headPosition.X != expected.X || headPosition.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, headPosition)
	}
	moveHead(RIGHT, 4)
	expected = Position{4, 3}
	headPosition = knotPositions[0]
	if headPosition.X != expected.X || headPosition.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, headPosition)
	}
	moveHead(DOWN, 2)
	expected = Position{4, 1}
	headPosition = knotPositions[0]
	if headPosition.X != expected.X || headPosition.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, headPosition)
	}
	moveHead(LEFT, 1)
	expected = Position{3, 1}
	headPosition = knotPositions[0]
	if headPosition.X != expected.X || headPosition.Y != expected.Y {
		t.Errorf("expected %v but received %v", expected, headPosition)
	}
}

func TestMoveTail(t *testing.T) {
	clearState()
	// .....    .....    .....
	// .TH.. -> .T.H. -> ..TH.
	// .....    .....    .....
	knotPositions[0] = Position{2, 1}
	knotPositions[1] = Position{1, 1}
	moveHead(RIGHT, 1)
	if knotPositions[0].X != 3 || knotPositions[0].Y != 1 {
		t.Errorf("expected %v but received %v", Position{3, 1}, knotPositions)
	}
	if knotPositions[1].X != 2 || knotPositions[1].Y != 1 {
		t.Errorf("expected %v but received %v", Position{2, 1}, knotPositions[1])
	}
	// ...    ...    ...
	// .T.    .T.    ...
	// .H. -> ... -> .T.
	// ...    .H.    .H.
	// ...    ...    ...
	// Tail starts one above
	knotPositions[0] = Position{1, 2}
	knotPositions[1] = Position{1, 3}
	moveHead(DOWN, 1)

	if knotPositions[0].X != 1 || knotPositions[0].Y != 1 {
		t.Errorf("expected %v but received %v", Position{1, 1}, knotPositions[0])
	}
	if knotPositions[1].X != 1 || knotPositions[1].Y != 2 {
		t.Errorf("expected %v but received %v", Position{1, 2}, knotPositions[1])
	}
	// .....    .....    .....
	// .....    ..H..    ..H..
	// ..H.. -> ..... -> ..T..
	// .T...    .T...    .....
	// .....    .....    .....
	knotPositions[0] = Position{2, 2}
	knotPositions[1] = Position{1, 1}
	moveHead(UP, 1)
	if knotPositions[0].X != 2 || knotPositions[0].Y != 3 {
		t.Errorf("expected %v but received %v", Position{2, 3}, knotPositions[0])
	}
	if knotPositions[1].X != 2 || knotPositions[1].Y != 2 {
		t.Errorf("expected %v but received %v", Position{2, 2}, knotPositions[1])
	}
	// .....    .....    .....
	// .....    .....    .....
	// ..H.. -> ...H. -> ..TH.
	// .T...    .T...    .....
	// .....    .....    .....
	knotPositions[0] = Position{2, 2}
	knotPositions[1] = Position{1, 1}
	moveHead(RIGHT, 1)
	if knotPositions[0].X != 3 || knotPositions[0].Y != 2 {
		t.Errorf("expected %v but received %v", Position{3, 2}, knotPositions[0])
	}
	if knotPositions[1].X != 2 || knotPositions[1].Y != 2 {
		t.Errorf("expected %v but received %v", Position{2, 2}, knotPositions[1])
	}
}

func TestAddTailPosition(t *testing.T) {
	clearState()
	result := len(tailVisitedPositions)
	expected := 0
	if result != expected {
		t.Errorf("expected %d received %d", expected, result)
	}
	addTailPosition(Position{0, 0}, 9)
	result = len(tailVisitedPositions)
	expected = 1
	if result != expected {
		t.Errorf("expected %d received %d", expected, result)
	}
	addTailPosition(Position{1, 1}, 9)
	result = len(tailVisitedPositions)
	expected = 2
	if result != expected {
		t.Errorf("expected %d received %d", expected, result)
	}
	addTailPosition(Position{1, 1}, 9)
	result = len(tailVisitedPositions)
	if result != expected {
		t.Errorf("expected %d received %d", expected, result)
	}
}

func TestMovement(t *testing.T) {
	then := assert.New(t)
	// == Initial State ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................

	for i := 0; i < 10; i++ {
		knotPositions[i] = Position{11, 5}
	}

	// == R 5 ==
	moveHead(RIGHT, 5)
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........54321H.........  (5 covers 6, 7, 8, 9, s)
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	then.Equal(Position{16, 5}, knotPositions[0])
	then.Equal(Position{15, 5}, knotPositions[1])
	then.Equal(Position{14, 5}, knotPositions[2])
	then.Equal(Position{13, 5}, knotPositions[3])
	then.Equal(Position{12, 5}, knotPositions[4])
	then.Equal(Position{11, 5}, knotPositions[5])
	then.Equal(Position{11, 5}, knotPositions[6])
	then.Equal(Position{11, 5}, knotPositions[7])
	then.Equal(Position{11, 5}, knotPositions[8])
	then.Equal(Position{11, 5}, knotPositions[9])
	// == U 8 ==
	moveHead(UP, 8)
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ................H.........
	// ................1.........
	// ................2.........
	// ................3.........
	// ...............54.........
	// ..............6...........
	// .............7............
	// ............8.............
	// ...........9..............  (9 covers s)
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	then.Equal(Position{16, 13}, knotPositions[0])
	then.Equal(Position{16, 12}, knotPositions[1])
	then.Equal(Position{16, 11}, knotPositions[2])
	then.Equal(Position{16, 10}, knotPositions[3])
	then.Equal(Position{16, 9}, knotPositions[4])
	then.Equal(Position{15, 9}, knotPositions[5])
	then.Equal(Position{14, 8}, knotPositions[6])
	then.Equal(Position{13, 7}, knotPositions[7])
	then.Equal(Position{12, 6}, knotPositions[8])
	then.Equal(Position{11, 5}, knotPositions[9])
	// == L 8 ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ........H1234.............
	// ............5.............
	// ............6.............
	// ............7.............
	// ............8.............
	// ............9.............
	// ..........................
	// ..........................
	// ...........s..............
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................

	// == D 3 ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// .........2345.............
	// ........1...6.............
	// ........H...7.............
	// ............8.............
	// ............9.............
	// ..........................
	// ..........................
	// ...........s..............
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................

	// == R 17 ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ................987654321H
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........s..............
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................

	// == D 10 ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........s.........98765
	// .........................4
	// .........................3
	// .........................2
	// .........................1
	// .........................H

	// == L 25 ==

	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........s..............
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// H123456789................

	// == U 20 ==

	// H.........................
	// 1.........................
	// 2.........................
	// 3.........................
	// 4.........................
	// 5.........................
	// 6.........................
	// 7.........................
	// 8.........................
	// 9.........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ...........s..............
	// ..........................
	// ..........................
	// ..........................
	// ..........................
	// ..........................

}
